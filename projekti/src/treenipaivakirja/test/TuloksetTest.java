package treenipaivakirja.test;
// Generated by ComTest BEGIN
import java.io.*;
import java.util.*;
import treenipaivakirja.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2023.05.02 19:01:26 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class TuloksetTest {

  // Generated by ComTest BEGIN  // Tulokset: 25

  private Tulokset tulokset; 
  private String tiedNimi; 
  private File ftied; 

  @Before
  public void alusta() throws SailoException {
     tiedNimi = "testailutulokset"; 
     ftied = new File(tiedNimi+".db"); 
     ftied.delete(); 
     tulokset = new Tulokset(tiedNimi); 
  }

  @After
  public void siivoa() {
     ftied.delete(); 
  }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa159 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa159() throws SailoException {    // Tulokset: 159
    Tulokset tulokset = new Tulokset(); 
    Tulos tulos1 = new Tulos(), tulos2 = new Tulos(); 
    tulos1.rekisteroi(); tulos2.rekisteroi(); 
    tulos1.vastaaTulos(); 
    tulos2.vastaaTulos(); 
    assertEquals("From: Tulokset line: 169", 0, tulokset.getLkm()); 
    tulokset.korvaaTaiLisaa(tulos1); assertEquals("From: Tulokset line: 170", 1, tulokset.getLkm()); 
    tulokset.korvaaTaiLisaa(tulos2); assertEquals("From: Tulokset line: 171", 2, tulokset.getLkm()); 
    Tulos tulos3 = tulos1.clone(); 
    tulos3.aseta(2, "xxx"); 
    Iterator<Tulos> it = tulokset.iterator(); 
    assertEquals("From: Tulokset line: 175", tulos1, it.next()); 
    tulokset.korvaaTaiLisaa(tulos3); assertEquals("From: Tulokset line: 176", 2, tulokset.getLkm()); 
    it = tulokset.iterator(); 
    Tulos t1 = it.next(); 
    Tulos t2 = it.next(); 
    assertEquals("From: Tulokset line: 180", tulos3, t1); 
    assertEquals("From: Tulokset line: 181", tulos2, t2); 
    assertEquals("From: Tulokset line: 182", t1.getTunnusNro(), tulos1.getTunnusNro()); 
    assertEquals("From: Tulokset line: 183", t2.getTunnusNro(), tulos2.getTunnusNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testIterator267 */
  @Test
  public void testIterator267() {    // Tulokset: 267
    Tulokset tulokset = new Tulokset(); 
    Tulos pitsi21 = new Tulos(2); tulokset.lisaa(pitsi21); 
    Tulos pitsi11 = new Tulos(1); tulokset.lisaa(pitsi11); 
    Tulos pitsi22 = new Tulos(2); tulokset.lisaa(pitsi22); 
    Tulos pitsi12 = new Tulos(1); tulokset.lisaa(pitsi12); 
    Tulos pitsi23 = new Tulos(2); tulokset.lisaa(pitsi23); 
    Iterator<Tulos> i2=tulokset.iterator(); 
    assertEquals("From: Tulokset line: 279", pitsi21, i2.next()); 
    assertEquals("From: Tulokset line: 280", pitsi11, i2.next()); 
    assertEquals("From: Tulokset line: 281", pitsi22, i2.next()); 
    assertEquals("From: Tulokset line: 282", pitsi12, i2.next()); 
    assertEquals("From: Tulokset line: 283", pitsi23, i2.next()); 
    try {
    assertEquals("From: Tulokset line: 284", pitsi12, i2.next()); 
    fail("Tulokset: 284 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
    int n = 0; 
    int jnrot[] = { 2,1,2,1,2} ; 
    for ( Tulos har:tulokset ) {
    assertEquals("From: Tulokset line: 290", jnrot[n], har.getPaivaNro()); n++; 
    }
    assertEquals("From: Tulokset line: 293", 5, n); 
  } // Generated by ComTest END
}